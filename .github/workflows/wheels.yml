on:
  push:
    branches:
      - main
env:
  TKRZW_VERSION: 1.0.24
  TKRZW_SHA: ebf6fe006d1c4d652bcecdc51c3513f3b9d90d43
  TKRZW_PYTHON_VERSION: 0.1.28
  TKRZW_PYTHON_SHA: 3f368b11c5d0142f838024f267c60bb1f958db77
  TKRZW_UPLOAD: 6
  TKRZW_NOUPLOAD: false
  TKRZW_PREFIX: /home/runner/tkrzw
  ALPINE_VERSION: v3.17
  LDFLAGS: "-flto"
  PYENV_ROOT: /home/runner/pyenv/root
  PYTHON_KEYRING_BACKEND: keyring.backends.null.Keyring
  UBUNTU_CUR: ubuntu-22.04
  UBUNTU_OLD: ubuntu-18.04


jobs:
  sdist:
    environment: pypi-test
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      ### Caching ###
      - name: Cache tkrzw python
        id: tkrzw-python-tar
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/tkrzw-python-${{ env.TKRZW_PYTHON_VERSION }}.tar.gz
          key: tkrzw-python-tar-${{ env.TKRZW_PYTHON_VERSION }}

      - name: Cache sdist local
        id: sdist-local
        uses: actions/cache@v3
        with:
          path: /home/runner/.local
          key: sdist-local

      ### Upload ###
      - name: Upload tkrzw python
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
          TWINE_REPOSITORY: ${{ secrets.TWINE_REPOSITORY }}
        run: |
          pip install --user -U pip
          pip install --user -U twine auditwheel
          ./wheeler sdist
        shell: bash

  alpine-library:
    needs: sdist
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      ### Caching ###
      - name: Cache alpne library build
        id: alpine-library-build
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/library-${{ env.TKRZW_VERSION }}
          key: alpine-library-${{ env.TKRZW_VERSION }}

      - name: Create alpine library build dir
        if: steps.alpine-library-build.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ github.workspace }}/library-${{ env.TKRZW_VERSION }}
        shell: bash

      - name: Cache alpine pkgs
        if: steps.alpine-library-build.outputs.cache-hit != 'true'
        id: alpine-sdist-pkgs
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/pkgs-${{ env.ALPINE_VERSION }}
          key: alpine-sdist-pkgs-${{ env.ALPINE_VERSION }}

      - name: Create alpine pkgs dir
        if: steps.alpine-library-build.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ github.workspace }}/pkgs-${{ env.ALPINE_VERSION }}
        shell: bash

      - name: Cache tkrzw
        if: steps.alpine-library-build.outputs.cache-hit != 'true'
        id: tkrzw-tar
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/tkrzw-${{ env.TKRZW_VERSION }}.tar.gz
          key: tkrzw-tar-${{ env.TKRZW_VERSION }}

      ### Build ###
      - name: Setup latest Alpine Linux
        id: alpine-setup
        if: steps.alpine-library-build.outputs.cache-hit != 'true'
        uses: jirutka/setup-alpine@v1
        with:
          branch: ${{ env.ALPINE_VERSION }}
          volumes: \
              ${{ github.workspace }}/library-${{ env.TKRZW_VERSION }}:/usr/local \
              ${{ github.workspace }}/pkgs-${{ env.ALPINE_VERSION }}:/etc/apk/cache

      - name: Setup build as root
        if: steps.alpine-library-build.outputs.cache-hit != 'true'
        run: |
            apk add python3 build-base linux-headers
        shell: alpine.sh --root {0}

      - name: Get and build library
        if: steps.alpine-library-build.outputs.cache-hit != 'true'
        run: |
          ./wheeler build_tkrzw /usr/local
        shell: alpine.sh {0}

  alpine-wheel:
    needs: alpine-library
    environment: pypi-test
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        version: [3.7.15, 3.8.15, 3.9.15, 3.10.8, 3.11.0]
    steps:
      - uses: actions/checkout@v3

      - name: Set pyenv path
        run: |
          echo "$PYENV_ROOT/bin" >> $GITHUB_PATH
        shell: bash

      ### Caching ###
      - name: Cache alpne library build
        id: alpine-library-build
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/library-${{ env.TKRZW_VERSION }}
          key: alpine-library-${{ env.TKRZW_VERSION }}

      - name: Cache alpine pkgs
        id: alpine-wheel-pkgs
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/pkgs-${{ env.ALPINE_VERSION }}
          key: alpine-wheel-pkgs-${{ env.ALPINE_VERSION }}

      - name: Create alpine pkgs dir
        if: steps.alpine-pkgs.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ github.workspace }}/pkgs-${{ env.ALPINE_VERSION }}
        shell: bash

      - name: Cache alpine pyenv
        id: alpine-pyenv
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/pyenv-${{ matrix.version }}
          key: alpine-pyenv-${{ matrix.version }}

      - name: Create alpine pyenv dir
        if: steps.alpine-pyenv.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ github.workspace }}/pyenv-${{ matrix.version }}
        shell: bash

      - name: Cache tkrzw python
        id: tkrzw-python-tar
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/tkrzw-python-${{ env.TKRZW_PYTHON_VERSION }}.tar.gz
          key: tkrzw-python-tar-${{ env.TKRZW_PYTHON_VERSION }}

      ### Build ###
      - name: Setup latest Alpine Linux
        id: alpine-setup
        uses: jirutka/setup-alpine@v1
        with:
          branch: ${{ env.ALPINE_VERSION }}
          volumes: \
              ${{ github.workspace }}/library-${{ env.TKRZW_VERSION }}:/usr/local \
              ${{ github.workspace }}/pyenv-${{ matrix.version }}:/home/runner/pyenv \
              ${{ github.workspace }}/pkgs-${{ env.ALPINE_VERSION }}:/etc/apk/cache

      - name: Setup build as root
        run: |
          apk add git \
              python3 \
              patchelf \
              bash \
              build-base \
              libffi-dev \
              openssl-dev \
              bzip2-dev \
              zlib-dev \
              xz-dev \
              readline-dev \
              sqlite-dev \
              linux-headers \
              curl \
              tk-dev
        shell: alpine.sh --root {0}

      - name: Install python version
        if: steps.alpine-pyenv.outputs.cache-hit != 'true'
        run: |
          ./wheeler pyenv ${{ matrix.version }}
        shell: alpine.sh {0}

      - name: Build wheel
        run: |
          ./wheeler build_wheel ${{ matrix.version }}
        shell: alpine.sh {0}

      ### Upload ###
      - name: Upload tkrzw python
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
          TWINE_REPOSITORY: ${{ secrets.TWINE_REPOSITORY }}
        run: |
          ./wheeler wheel ${{ matrix.version }} musllinux_1_2_x86_64
        shell: alpine.sh {0}

  manylinux-library:
    needs: sdist
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v3

      ## Caching ###
      - name: Cache manylinux library build
        id: manylinux-library-build
        uses: actions/cache@v3
        with:
          path: ${{ env.TKRZW_PREFIX }}
          key: manylinux-library-${{ env.TKRZW_VERSION }}

      - name: Cache tkrzw
        if: steps.manylinux-library-build.outputs.cache-hit != 'true'
        id: tkrzw-tar
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/tkrzw-${{ env.TKRZW_VERSION }}.tar.gz
          key: tkrzw-tar-${{ env.TKRZW_VERSION }}

      ### Build ###
      - name: Install build essential
        if: steps.manylinux-library-build.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential
        shell: bash

      - name: Get and build library
        if: steps.manylinux-library-build.outputs.cache-hit != 'true'
        run: |
          ./wheeler build_tkrzw ${{ env.TKRZW_PREFIX }}
        shell: bash

  manylinux-wheel:
    needs: manylinux-library
    environment: pypi-test
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        version: [3.7.15, 3.8.15, 3.9.15, 3.10.8, 3.11.0]
    steps:
      - uses: actions/checkout@v3

      - name: Set pyenv path
        run: |
          echo "${{ env.TKRZW_PREFIX }}/bin:$PYENV_ROOT/bin" >> $GITHUB_PATH
        shell: bash

      ### Caching ###
      - name: Cache manylinux library build
        id: manylinux-library-build
        uses: actions/cache@v3
        with:
          path: ${{ env.TKRZW_PREFIX }}
          key: manylinux-library-${{ env.TKRZW_VERSION }}

      - name: Cache manylinux pyenv
        id: manylinux-pyenv
        uses: actions/cache@v3
        with:
          path: /home/runner/pyenv/root
          key: manylinux-pyenv-${{ matrix.version }}

      - name: Cache tkrzw python
        id: tkrzw-python-tar
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/tkrzw-python-${{ env.TKRZW_PYTHON_VERSION }}.tar.gz
          key: tkrzw-python-tar-${{ env.TKRZW_PYTHON_VERSION }}

      ### Build ###
      - name: Setup build as root
        run: |
            sudo cp ${{ github.workspace }}/patchelf /usr/local/bin
            sudo apt-get update -y
            sudo apt-get install -y \
            make \
            build-essential \
            libssl-dev zlib1g-dev \
            libbz2-dev \
            libreadline-dev \
            libsqlite3-dev \
            wget \
            curl \
            llvm \
            libncursesw5-dev \
            xz-utils \
            tk-dev \
            libxml2-dev \
            libxmlsec1-dev \
            libffi-dev liblzma-dev
        shell: bash

      - name: Install python version
        if: steps.manylinux-pyenv.outputs.cache-hit != 'true'
        run: |
          ./wheeler pyenv ${{ matrix.version }} 3.10.8
        shell: bash

      - name: Build wheel
        run: |
          ./wheeler build_wheel ${{ matrix.version }}
        shell: bash

      ### Upload ###
      - name: Upload tkrzw python
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
          TWINE_REPOSITORY: ${{ secrets.TWINE_REPOSITORY }}
        run: |
          ./wheeler wheel ${{ matrix.version }} manylinux_2_27_x86_64
        shell: bash
