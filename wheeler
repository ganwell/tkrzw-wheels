#!/usr/bin/env python3

import hashlib
import os
import sys
import urllib.request as request
from contextlib import contextmanager
from pathlib import Path
from subprocess import DEVNULL, CalledProcessError, run as srun

_CHUNK = 16 * 1024


def make_cp(version):
    sversion = version.split(".")
    return f"cp{sversion[0]}{sversion[1]}"


def make_config(python_version=None, tag=None):
    upload = os.environ["TKRZW_UPLOAD"]
    tkrzw_version = os.environ["TKRZW_VERSION"]
    python_module_version = os.environ["TKRZW_PYTHON_VERSION"]
    python_module_revision = f"{python_version}.{upload}"
    config = {
        "noupload": os.environ["TKRZW_NOUPLOAD"].lower() == "true",
        "sdist": f"dist/tkrzw-{python_module_revision}.tar.gz",
        "python_module_version": python_module_version,
        "python_module_revision": python_module_revision,
        "python_url": f"https://dbmx.net/tkrzw/pkg-python/tkrzw-python-{python_module_version}.tar.gz",
        "python_sha": os.environ["TKRZW_PYTHON_SHA"],
        "python_src": f"tkrzw-python-{python_module_version}",
        "tkrzw_version": tkrzw_version,
        "library": f"tkrzw-{tkrzw_version}",
        "url": f"https://dbmx.net/tkrzw/pkg/tkrzw-{tkrzw_version}.tar.gz",
        "sha": os.environ["TKRZW_SHA"],
    }
    if python_version:
        cp = make_cp(python_version)
        config.update(
            {
                "python_version": python_version,
                "python_path": get_python_path(python_version),
                "dist_path": f"./dist/tkrzw-{python_module_revision}-{cp}-{cp}-linux_x86_64.whl",
            }
        )
        if tag:
            path = f"./wheelhouse/tkrzw-{python_module_revision}-{cp}-{cp}-{tag}.whl"
            config.update({"tag": tag, "wheelhouse_path": path})
    return config


def get_python_path(python_version):
    root = os.environ["PYENV_ROOT"]
    return f"{root}/versions/{python_version}/bin/python3"


def pip_install(python, packages):
    if isinstance(packages, str):
        packages = [packages]
    run([python, "-m", "pip", "install", "-U"] + packages)


@contextmanager
def chdir(path):
    cwd = os.getcwd()
    os.chdir(path)
    print(f"change dir {path}")
    yield
    os.chdir(cwd)
    print(f"restore dir {cwd}")


def args_print(args):
    if not isinstance(args, str):
        args = [str(x) for x in args]
        args = " ".join(args)
    print(f"\n$ {args}")


def run(*args, stdout=None, stderr=None, stdin=None, check=True, shell=False, **kwargs):
    cmd = args[0]
    args = args[1:]
    args_print(cmd)
    if stdout is None:
        stdout = sys.stdout
    if stderr is None:
        stderr = sys.stderr
    if stdin is None and "input" not in kwargs:
        stdin = DEVNULL
    if shell and not isinstance(cmd, str):
        cmd = " ".join(cmd)
    return srun(
        cmd,
        *args,
        stdout=stdout,
        stderr=stderr,
        stdin=stdin,
        check=check,
        shell=shell,
        **kwargs,
    )


def swrite(*args, **kwargs):
    out = sys.stdout
    out.write(*args, **kwargs)
    out.flush()


def download_url(url, sha):
    file_ = Path(url).name
    m = hashlib.sha1()
    if Path(file_).exists():
        print(f"check {file_}")
        with open(file_, "rb") as f:
            while True:
                swrite(".")
                chunk = f.read(_CHUNK)
                m.update(chunk)
                if not chunk:
                    break

    else:
        print(f"download {file_}")
        response = request.urlopen(url)
        with open(file_, "wb") as f:
            while True:
                swrite(".")
                chunk = response.read(_CHUNK)
                m.update(chunk)
                if not chunk:
                    break
                f.write(chunk)
    file_sha = m.hexdigest()
    if file_sha != sha:
        raise ValueError(f"sha1sum of {file_} {file_sha} != {sha}")
    print(" verified")
    return file_


def get(url, sha):
    file_ = download_url(url, sha)
    run(["tar", "xfz", file_])


def get_tkrzw(c):
    get(c["url"], c["sha"])


def build_tkrzw():
    prefix = sys.argv[2]
    c = make_config()
    get_tkrzw(c)
    with chdir(c["library"]):
        run(
            f"./configure --enable-static --disable-shared --prefix {prefix}",
            shell=True,
        )
        run(["make", "-j2"])
        run(["make", "check"])
        try:
            run(["make", "install"])
        except CalledProcessError:
            # sudo make me a sandwich
            run(["sudo", "make", "install"])


def get_tkrzw_python(c):
    get(c["python_url"], c["python_sha"])


def pyenv():
    python_version = sys.argv[2]
    run("curl https://pyenv.run | bash", shell=True)
    run(f"pyenv install {python_version}", shell=True)
    if len(sys.argv) > 3:
        python_version = sys.argv[2]
        run(f"pyenv install {python_version}", shell=True)


def auditwheel(c, python):
    tag = c["tag"]
    run([python, "-m", "auditwheel", "show", c["dist_path"]], shell=True)
    run(
        [
            python,
            "-m",
            "auditwheel",
            "repair",
            "--plat",
            tag,
            c["dist_path"],
        ],
        shell=True,
    )
    run([python, "-m", "auditwheel", "show", c["wheelhouse_path"]], shell=True)


def fixup_setup(c):
    with open("../setup.py", "r", encoding="UTF-8") as rf:
        with open("setup.py", "w", encoding="UTF-8") as wf:
            for line in rf.readlines():
                if line.startswith("package_version"):
                    rev = c["python_module_revision"]
                    wf.write(f"package_version = '{rev}'\n")
                else:
                    wf.write(line)


def build_wheel():
    python_version = sys.argv[2]
    c = make_config(python_version)
    python = c["python_path"]
    pip_install(python, "pip")
    pip_install(python, "build")
    get_tkrzw_python(c)
    path = c["python_src"]
    with chdir(path):
        fixup_setup(c)
        run([python, "-m", "build", "--wheel"], shell=True)


def upload(c, python, file_):
    repo = os.environ["TWINE_REPOSITORY"]
    print(f"repo: {repo}")
    if not c["noupload"]:
        run([python, "-m", "twine", "upload", "--non-interactive", "-r", repo, file_])


def sdist():
    c = make_config()
    get_tkrzw_python(c)
    path = c["python_src"]
    with chdir(path):
        fixup_setup(c)
        run(["python3", "setup.py", "sdist"])
        upload(c, "python3", c["sdist"])


def wheel():
    python_version = sys.argv[2]
    tag = sys.argv[3]
    c = make_config(python_version, tag)
    if len(sys.argv) > 4:
        python = get_python_path(sys.argv[4])
    else:
        python = c["python_path"]
    get_tkrzw_python(c)
    path = c["python_src"]
    pip_install(python, "pip")
    pip_install(python, ["twine", "auditwheel"])
    with chdir(path):
        auditwheel(c, python)
        upload(c, python, c["wheelhouse_path"])


def main():
    action = sys.argv[1]
    globals()[action]()


if __name__ == "__main__":
    main()
